/* NoDef, VariableTypeRequired */
def getWorkspace() {
    pwd().replace('%2F', '__')
}

node('') {
    ws(getWorkspace()) {

        final pipelineName = env.JOB_NAME.replace('%2F', '/')
        final buildNumber = env.BUILD_DISPLAY_NAME
        final branchName = env.BRANCH_NAME
        final buildUrl = env.BUILD_URL

        // remove the preceding 'MB-' of the pipeline name and remove the branch
        final fullServiceName = pipelineName.replaceAll("(?:MB-)?([\\w-]+)(?:(?:%2F|/)[\\w-\\.]+)*", "\$1")

        def LAST_STAGE_NAME = ''

        def deploymentConf = readJSON file: 'jenkins/deployment.json'

        // if branchname contains an url encoded slash, replace it with a slash
        pipelineName = pipelineName.replace('%2F', '/')

        def buildEnv = ''

        try {
            stage('Checkout') {
                LAST_STAGE_NAME = env.STAGE_NAME
                echo "Checking out ${branchName}..."
                checkout scm
                buildEnv = branchName.replace('master', 'prod').replace('develop', 'dev').replaceAll('release/.*', 'stage')
            }

            stage('Config') {
                LAST_STAGE_NAME = env.STAGE_NAME
                echo "Getting Config for ${buildEnv}..."

                withCredentials([string(credentialsId: "sevenZipPassword${buildEnv}", variable: 'password')]) {
                    //    sh "/usr/bin/7z x -y -p ${password} config-${buildEnv.toLowerCase()}.7z"
                    sh "/usr/bin/7z x -y  config-${buildEnv.toLowerCase()}.7z"
                }
            }

            echo 'Spawning docker container...'

            docker.image('localhost:5000/docker-php-nginx:7.4').inside {
                stage('PHP Build') {
                    LAST_STAGE_NAME = env.STAGE_NAME
                    echo 'Running PHP Build...'
                    if (fileExists 'composer.json'){
                        echo 'Found composer.json.. running composer install'
                        sh 'composer install'
                    }
                }

                stage('JS Build') {
                    LAST_STAGE_NAME = env.STAGE_NAME
                    echo 'Running JS Build...'
                    if (fileExists 'package.json'){
                        echo 'Found package.json.. running npm install'
                        sh 'npm install'
                    }
                }

                stage('Create Artifact') {
                    if (fileExists 'release.tar.gz') {
                        sh 'rm release.tar.gz'
                    }

                    sh 'tar -zcvf release.tar.gz ./*'
                }
            }

            stage('Deployment') {
                LAST_STAGE_NAME = env.STAGE_NAME

                def destinations = deploymentConf['environments'][buildEnv]['destinations'];
                for (destination in destinations) {
                    def path = destination['path'];
                    def sshUserHost destination['user'] + "@" + destination['host']
                    def copyPath = destination['path'] + "../jenkinsrelease-${fullServiceName}/";

                    echo "Copy the Release to ${user}@${host}:${copyPath}"
                    sh "scp  release.tar.gz  ${sshUserHost}:${copyPath}"
                }

                 for (destination in destinations) {
                     def commands = destination['commands'];
                     def sshUserHost destination['user'] + "@" + destination['host']

                     for (command in commands) {
                        echo "Execute ${command} on {sshUserHost}"
                        sh "ssh ${sshUserHost} ' ${command}'"
                     }
                 }
            }
        } catch (e) {
            echo "Throwing Exception \"${e}\" --- Pipeline was not successful!"
            // slackSend(channel: slackRecipient, color: '#FF0000', message: "*Pipeline-Name:* ${pipelineName} \n*Build-Nummer:* ${buildNumber} \n"
            //         + "*Branch-Name:* ${branchName}\n:jenkins-failed: Pipeline failed in Step \"${LAST_STAGE_NAME}\"! (<${buildUrl}|Open>)")
            currentBuild.result = 'FAILED'      // Set result of currentBuild !Important!
            // Since we're catching the exception in order to report on it, we need to re-throw it, to ensure that the build is marked as failed
            throw e
        } finally {
            if (currentBuild.result == 'SUCCESS') {
            //    slackSend(channel: slackRecipient, color: 'good', message: "*Pipeline-Name:* ${pipelineName} \n*Build-Nummer:* ${buildNumber} \n"
            //            + "*Branch-Name:* ${branchName}\n:white_check_mark: Pipeline finished (<${buildUrl}|Open>)")
            }
        }
    }
}
