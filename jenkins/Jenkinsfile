/* NoDef, VariableTypeRequired */
def getWorkspace() {
    pwd().replace('%2F', '__')
}

node('') {
    ws(getWorkspace()) {

        final pipelineName = env.JOB_NAME.replace('%2F', '/')
        final buildNumber = env.BUILD_DISPLAY_NAME
        final branchName = env.BRANCH_NAME
        final buildUrl = env.BUILD_URL

        // remove the preceding 'MB-' of the pipeline name and remove the branch
        final fullServiceName = pipelineName.replaceAll("(?:MB-)?([\\w-]+)(?:(?:%2F|/)[\\w-\\.]+)*", "\$1")

        def LAST_STAGE_NAME = ''

        def deploymentConf = readJSON file: 'jenkins/deployment.json'

        // if branchname contains an url encoded slash, replace it with a slash
        pipelineName = pipelineName.replace('%2F', '/')

        def buildEnv = ''

        try {
            stage('Checkout') {
                LAST_STAGE_NAME = env.STAGE_NAME
                echo "Checking out ${branchName}..."
                checkout scm
                buildEnv = branchName.replace('master', 'prod').replace('develop', 'dev').replaceAll('release/.*', 'stage')
            }

            stage('Parse Commit'){
                commit = sh(returnStdout: true, script: 'git log -1 --oneline').trim()

                tmpCommit = commit.split("cmd:")
//cmd:sedico: cmd:seup:

                cmdToRun = []

                for (cm in tmpCommit){

                    cmd = cm.split(":")

                    echo cmd[0]
                    cmdToRun[] = cmd[0]
                }

                for (dbg  in cmdToRun){
                    echo dbg
                }
            }

            echo 'Spawning docker container...'
            docker.image(deploymentConf.buildimage).inside {
                stage('PHP Build') {
                    LAST_STAGE_NAME = env.STAGE_NAME

                    def composer = fileExists 'composer.json'
                    if (composer){
                        echo 'Found composer.json.. running composer install'
                        sh 'composer install'
                    }
                }

                stage('PHP Build') {
                    LAST_STAGE_NAME = env.STAGE_NAME

                    def composer = fileExists 'composer.json'
                    if (composer){
                        echo 'Found composer.json.. running composer install'
                        sh 'composer install'
                    }
                }

                stage('JS Build') {
                    LAST_STAGE_NAME = env.STAGE_NAME

                    echo 'Running JS Build...'
                    def npm = fileExists 'package.json'
                    if (npm){
                        echo 'Found package.json.. running npm install'
                        sh 'npm install'
                    }
                }

                stage('Apply Hotfixes') {
                    LAST_STAGE_NAME = env.STAGE_NAME
                    echo 'Todo :) '
                }


                stage('Create Artifact') {
                    LAST_STAGE_NAME = env.STAGE_NAME
                    def release = fileExists 'release.tar.gz'
                    if (release) {
                        sh 'rm release.tar.gz'
                    }

                    sh 'tar -zcvf release.tar.gz ./*'
                }
            }

                stage('Config') {
                    LAST_STAGE_NAME = env.STAGE_NAME




                }

            stage('Deployment') {
                LAST_STAGE_NAME = env.STAGE_NAME

                println deploymentConf['environments']
                println deploymentConf['environments'][buildEnv]

                def serverWorkDir = "/tmp/jenkinsrelease-${fullServiceName}/"

                def destinations = deploymentConf['environments'][buildEnv]['destinations']

                echo "Copy artifact to defined destinations and untar it to ${serverWorkDir}"

                for (destination in destinations) {
                    def sshUserHost = destination['user'] + "@" + destination['host']

                    sh "ssh ${sshUserHost} ' mkdir -p ${serverWorkDir}release/'"
                    sh "scp  release.tar.gz  ${sshUserHost}:${serverWorkDir}."
                    sh "ssh  ${sshUserHost} 'tar -xzvf ${serverWorkDir}release.tar.gz -C ${serverWorkDir}release/'"
                }

                echo "Copy release from ${serverWorkDir} to the real destination and run the defined commands"

                for (destination in destinations) {
                    def path = destination['path']
                    def sshUserHost = destination['user'] + "@" + destination['host']

                    sh "ssh  ${sshUserHost} 'sudo chmod 776 ${path}*  &&  sudo cp -r ${serverWorkDir}release/* ${path} && sudo chown www-data:www-data ${path}* -R'" //TODO!!!!

                    def commands = destination['commands']

                    for (command in commands) {
                        sh "ssh ${sshUserHost} 'cd ${path} && ${command}'"
                    }
                    //TODO!!!
                    sh "ssh  ${sshUserHost} 'sudo chmod 776 ${path}*  && sudo chown www-data:www-data ${path}* -R'"

                }
            }

        } catch (e) {
            echo "Throwing Exception \"${e}\" --- Pipeline was not successful!"
            // slackSend(channel: slackRecipient, color: '#FF0000', message: "*Pipeline-Name:* ${pipelineName} \n*Build-Nummer:* ${buildNumber} \n"
            //         + "*Branch-Name:* ${branchName}\n:jenkins-failed: Pipeline failed in Step \"${LAST_STAGE_NAME}\"! (<${buildUrl}|Open>)")
            currentBuild.result = 'FAILED'      // Set result of currentBuild !Important!
            // Since we're catching the exception in order to report on it, we need to re-throw it, to ensure that the build is marked as failed
            throw e
        } finally {
            if (currentBuild.result == 'SUCCESS') {
            //    slackSend(channel: slackRecipient, color: 'good', message: "*Pipeline-Name:* ${pipelineName} \n*Build-Nummer:* ${buildNumber} \n"
            //            + "*Branch-Name:* ${branchName}\n:white_check_mark: Pipeline finished (<${buildUrl}|Open>)")
            }
        }
    }
}
